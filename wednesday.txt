Wednesday, September 18th
=========================

Morning: Short reads & mapping
------------------------------

Lecture: sequencing basics
***************************

Mapping with bwa
*****************

One of the most common operations when dealing with NGS data is mapping sequences
to other sequences, and most commonly, mapping reads to a reference. Because
short read alignment is so common, there is a deluge of programs available for doing
it, and it is well-understood problem. Most of the efficient programs work by first
building an *index* of the sequence that will be mapped to, which allows for
extremely fast lookups, and then running a separate module which uses that index
to align short sequences against the reference. Alignment is used for visualization,
coverage estimation, SNP calling, expression analysis, and a slew of other problems.
For a high-level overview, try `this NCBI review <http://www.ncbi.nlm.nih.gov/pmc/articles/PMC2836519/>`__.

Getting the Dependencies
````````````````````````

bwa is one of the many available read mappers. bwa is a good "reference" version 
of a common alignment algorithm based on the Burrows-Wheeler transform; those
of you looking to dive into a relatively thick paper on it can read about it
`here <http://bioinformatics.oxfordjournals.org/content/25/14/1754.short>`__.

Firstly, let's download bwa::

    cd /root
    curl -L "http://downloads.sourceforge.net/project/bio-bwa/bwa-0.7.5a.tar.bz2?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fbio-bwa%2Ffiles%2F&ts=1379347638&use_mirror=softlayer-dal" > bwa-0.7.5a.tar.bz2

And then decompress it::

    tar xjf bwa-0.7.5a.tar.bz2

Now, change into the directory with the source code and compile it::

    cd bwa-0.7.5a/
    make
    
Finally, move the compiled executable to a location where the operating system
can find it::

    cp bwa /usr/local/bin

So what did we actually just do? bwa is offered as an open-source program -- that
is, the actual code which defines its functionality is freely available. However,
bwa is written in C, which, unlike Python, is not "interpreted." Instead, the
source code needs to be parsed and converted into machine language which can be
run on the processor. This allows compiled programs to run much more efficiently 
than their interpreted counterparts, at the cost of needing to be recompiled for
different systems. Although pre-compiled executables can be found for many programs,
Unix programs are often distributed as source. 'make' is a program for tracking
dependencies amongst files, and is used to manage the compilation of larger
projects with many files.

Now, we need to grab a few more dependencies. We'll download screed, which is
a simple python module for parsing fasta files developed by our lab at MSU::

    pip install screed

And then khmer, which is a Python interface to a really fast (and awesome) piece
of software for counting k-mers (more on that later)::

    cd /usr/local/share
    git clone https://github.com/ged-lab/khmer.git
    cd khmer
    git checkout 2013-caltech-cemi
    make

Now that we've downloaded and built khmer, we'll add it to the system's python
PATH so that our scripts now where to find it::

    echo 'export PYTHONPATH=/usr/local/share/khmer/python' >> ~/.bashrc
    source ~/.bashrc


Get Some Test Data
```````````````````

We've got the programs we need, so now let's get some data to play with. Everybody
*loves* ecoli, so we'll grab a reference genome of the k-12 strain. The program
we'll use is called curl, which grabs data from a URL and spits it out to
the terminal; using the > sign, we can direct that output into a file, like so::

    curl http://www.genome.wisc.edu/pub/sequence/U00096.2.fas > ecoli_k12.fa

The > sign is a general UNIX construct for redirecting a 'stream' to a file. You'll
see it relatively often.

We've got a reference genome, so now let's get some reads to align to it::

    curl -O https://s3.amazonaws.com/public.ged.msu.edu/ecoli_ref-5m.fastq.gz

Just to keep you on your toes, we've switched around the format of curl this time.
Instead of redirecting the output to a file, the -O flag will simply save the file
to disk in the current directory using the same name as on the remote server. The
only real difference in behavior is that in the first form, you can choose the
name of the file.

Now that we've got the reads, let's split them. These reads are paired -- that is,
each has a "left" and "right" component which came from the same molecule of DNA,
and fall within some range of distances from each other. This allows for assemblers
and mappers to reap some of the benefits of longer reads, without actually requiring
the sequencing hardware to produce longer reads. We'll go into further detail
during the assembly portion.

These paired reads happen to be "interleaved," meaning that the left and right
reads are in the same file, in alternating order. Many programs require them
to be in separate files, so we have a simply script which splits them::

    python /usr/local/share/khmer/scripts/split-paired-reads.py ecoli_ref-5m.fastq.gz 

To speed up the demonstration, we will just map a subset of the reads rather than
the entire file, which is somewhat large (though small compared to many datasets).
The head command outputs the first n lines of a file, by default 4::

    head -n 100000 ecoli_ref-5m.fastq.gz.1 > left.fa
    head -n 100000 ecoli_ref-5m.fastq.gz.2 > right.fa

We've got our reads and a reference, so we're ready to get started. First, we
build an index of the reference genome using bwa::

    bwa index -a bwtsw ecoli_k12.fa 

The -a flag tells bwa which indexing algorithm to use. The program will automatically
output some files with set extensions, which the main alignment program knows the
format of. Thus, we run the alignment like so::

    bwa mem ecoli_k12.fa left.fa right.fa > aln.x.ecoli_k12.sam

which aligns the left and right reads against the reference, and outputs them
to the given SAM file. SAM is a common format for alignments which is understood
by many programs, along with BAM. It's often useful to have both, so we'll use
a utility called samtools to produce a sorted BAM file as well::

    samtools view -uS aln.x.ecoli_k12.sam > aln.x.ecoli_k12.bam
    samtools sort aln.x.ecoli_k12.bam aln.x.ecoli_k12.bam.sorted
    samtools index aln.x.ecoli_k12.bam.sorted.bam

And there you have it! For additional resources, check out:
* `the bwa manual <http://bio-bwa.sourceforge.net/bwa.shtml>`__
* `samtools <http://samtools.sourceforge.net/>`__
* `the SAM format <http://samtools.sourceforge.net/SAM1.pdf>`__

@cswelcher TODO:

http://www.ncbi.nlm.nih.gov/pubmed/22522955
http://www.ebi.ac.uk/ena/data/view/SRA048664  (see files athyra:~t/cit/)

Building a SAM file.
Calling SNPs
Tablet.

http://ged.msu.edu/angus/tutorials-2013/bwa-tutorial.html

Afternoon: QC; Assembly
-----------------------

Assembly exercise?

Looking at mapping mismatches:
http://ged.msu.edu/angus/tutorials-2013/plot-mapping-mismatches.html


Quality trimming
QC and FASTQ:
http://ged.msu.edu/angus/tutorials-2013/short-read-quality-evaluation.html

Assembling E. coli
http://ged.msu.edu/angus/tutorials-2013/assembling-ecoli-with-velvet.html
Velvet
SPADES
idba

Evaluating assemblies.
Comparing assemblies. (?)

Q: Do we want to do the assembly & mapping exercise?)
